#!/usr/bin/env python3
"""
Python script to generate EmbeddedDialogues.cs from YAML files.
This script replicates the functionality of YamlToStringProcessor.cs
"""

import os
import glob
import re
from pathlib import Path

# Configuration constants
YAML_FOLDER = "../../DialogueData"
OUTPUT_FOLDER = "../Generated"
OUTPUT_CLASS = "EmbeddedDialogues"
NAMESPACE = "DialogueSystem"
OUTPUT_FILE = f"{OUTPUT_CLASS}.cs"

def is_yaml_file(path):
    """Check if file has yaml/yml extension"""
    return path.lower().endswith(('.yaml', '.yml'))

def to_valid_csharp_identifier(input_str):
    """Convert string to valid C# identifier"""
    if not input_str:
        return "UNNAMED"
    
    # Replace invalid characters with underscores
    result = ""
    for i, char in enumerate(input_str):
        if char.isalpha() or char == '_' or (i > 0 and char.isdigit()):
            result += char
        else:
            result += '_'
    
    # Ensure it starts with letter or underscore
    if result and result[0].isdigit():
        result = "_" + result
    
    # Convert to PascalCase
    return to_pascal_case(result)

def to_pascal_case(input_str):
    """Convert string to PascalCase"""
    if not input_str:
        return input_str
    
    parts = re.split(r'[_\-\s]+', input_str)
    result = ""
    
    for part in parts:
        if part:
            result += part[0].upper() + part[1:].lower() if len(part) > 1 else part.upper()
    
    return result

def escape_string_literal(input_str):
    """Escape string for C# string literal"""
    return (input_str
            .replace("\\", "\\\\")
            .replace('"', '\\"')
            .replace("\0", "\\0")
            .replace("\a", "\\a")
            .replace("\b", "\\b")
            .replace("\f", "\\f")
            .replace("\n", "\\n")
            .replace("\r", "\\r")
            .replace("\t", "\\t")
            .replace("\v", "\\v"))

def find_yaml_files():
    """Find all YAML files in the dialogue data folder"""
    yaml_files = []
    
    if os.path.exists(YAML_FOLDER):
        # Find all .yaml and .yml files recursively
        for pattern in ['**/*.yaml', '**/*.yml']:
            yaml_files.extend(glob.glob(os.path.join(YAML_FOLDER, pattern), recursive=True))
    
    return sorted(yaml_files)  # Sort for consistent output

def generate_csharp_file(yaml_files, output_path):
    """Generate the C# file content"""
    lines = []
    
    # File header
    lines.extend([
        "// AUTO-GENERATED CODE - DO NOT EDIT MANUALLY!",
        "// This file is automatically generated from YAML files in DialogueData folder",
        "// Regenerated whenever YAML files are modified",
        "",
        "using System.Collections.Generic;",
        "using System.Linq;",
        "",
        f"namespace {NAMESPACE}",
        "{",
        f"    public static class {OUTPUT_CLASS}",
        "    {"
    ])
    
    # Generate string constants for each file
    file_constants = []
    for file_path in yaml_files:
        file_name = Path(file_path).stem  # Get filename without extension
        constant_name = to_valid_csharp_identifier(file_name)
        
        # Read YAML content
        with open(file_path, 'r', encoding='utf-8') as f:
            yaml_content = f.read()
        
        escaped_content = escape_string_literal(yaml_content)
        
        lines.extend([
            f'        public const string {constant_name} = "{escaped_content}";',
            ""
        ])
        
        file_constants.append((file_name, constant_name))
    
    # Generate dictionary for runtime access
    lines.extend([
        "        private static readonly Dictionary<string, string> _dialogues = new Dictionary<string, string>",
        "        {"
    ])
    
    for i, (file_name, constant_name) in enumerate(file_constants):
        comma = "," if i < len(file_constants) - 1 else ""
        lines.append(f'            ["{file_name}"] = {constant_name}{comma}')
    
    lines.extend([
        "        };",
        ""
    ])
    
    # Helper methods
    lines.extend([
        "        public static string GetDialogue(string name)",
        "        {",
        "            return _dialogues.TryGetValue(name, out string dialogue) ? dialogue : null;",
        "        }",
        "",
        "        public static bool HasDialogue(string name)",
        "        {",
        "            return _dialogues.ContainsKey(name);",
        "        }",
        "",
        "        public static string[] GetAllDialogueNames()",
        "        {",
        "            return _dialogues.Keys.ToArray();",
        "        }",
        "",
        "        public static Dictionary<string, string> GetAllDialogues()",
        "        {",
        "            return new Dictionary<string, string>(_dialogues);",
        "        }",
        "    }",
        "}"
    ])
    
    # Write file
    content = "\n".join(lines)
    with open(output_path, 'w', encoding='utf-8') as f:
        f.write(content)

def main():
    """Main function to generate EmbeddedDialogues.cs"""
    print("Generating EmbeddedDialogues.cs from YAML files...")
    
    # Create output directory if it doesn't exist
    os.makedirs(OUTPUT_FOLDER, exist_ok=True)
    
    # Find all YAML files
    yaml_files = find_yaml_files()
    
    if not yaml_files:
        print(f"No YAML files found in {YAML_FOLDER}")
        return
    
    print(f"Found {len(yaml_files)} YAML files:")
    for file_path in yaml_files:
        print(f"  - {file_path}")
    
    # Generate C# file
    output_path = os.path.join(OUTPUT_FOLDER, OUTPUT_FILE)
    generate_csharp_file(yaml_files, output_path)
    
    print(f"Successfully generated {output_path}")
    print(f"Generated {OUTPUT_CLASS}.cs with {len(yaml_files)} YAML files embedded as strings.")

if __name__ == "__main__":
    main()
